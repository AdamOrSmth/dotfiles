#+title: Hyprland Configuration
#+property: header-args :tangle hyprland.conf
#+auto_tangle: t

* Monitors
I use =Hyprland= on different devices, so their monitor setup is not always consistent; therefore, I've moved device-specific configuration to their respective host modules. =Hyprland= by default applies the ~preferred~ and ~auto~ option for monitors, which serve as a nice fallback; see [[https://github.com/hyprwm/Hyprland/wiki/Advanced-config#monitors][here]].
* General
Settings that don't really belong anywhere else (although some of this arguably belongs in the =input= section, but oh well, it's not my code).

+ ~border_size~ :: Border width of 3 pixels.
+ ~gaps_in~ :: Gap of 3 pixels between windows.
+ ~gaps_out~ :: Gap of 6 pixels between monitor edge and windows.

The total distance between windows is equal to ~gaps_in~ + ~border_size~.

+ ~col.active_border~, ~col.inactive_border~ :: Self-explanatory.

#+begin_src conf
general {
    border_size         = 2
    gaps_in             = 2
    gaps_out            = 6

    col.active_border   = 0xFF88C0D0
    col.inactive_border = 0x00000000
}
#+end_src
* Decoration
Appearance-related settings.

+ ~rounding~ :: Round corners of windows by 8 pixels.

+ ~blur~ :: Enable dual kawase background blur of transparent windows.
+ ~blur_size~, ~blur_passes~ :: Blur amount depends on both ~blur_size~ and ~blur_passes~. Increasing ~blur_passes~ increases blur more, but comes at a performance cost, while increasing ~blur_size~ is more performant but begins to produce artifacts at higher values. I've found 3 and 3 work well for me.
+ blur_new_optimizations :: Enable optimizations to blur that help performance a lot. Defaults to ~false~ due to some people having graphical issues.

#+begin_src conf
decoration {
    rounding               = 8

    blur                   = true
    blur_size              = 3
    blur_passes            = 3
    blur_new_optimizations = true
}
#+end_src
* Animations
Settings related to animations present within =Hyprland=.

I first define some custom bezier curves using the ~bezier~ keyword, which takes a name and then the coordinates for the two points of a cubic bezier. A good place to mess around with curves is [[https://www.cssportal.com/css-cubic-bezier-generator/][here]].
+ overshot :: A curve that starts steep and levels out with a bump going slightly over 1. Used with ~windows~.
+ easein :: An almost-linear ease-in used with ~fadein~ in conjunction with =overshot= on ~windows~.
+ easeout :: A steep, extreme ease-out curve for switching workspaces.

There are four animations in =Hyprland=:
+ ~windows~ :: Animations for the opening, closing, and movement of windows.
+ ~fade~ :: Animation of windows fading in + out on open + close, respectively.
+ ~border~ :: Animation of borders fading in + out on focus switch.
+ ~workspaces~ :: Animation of switching workspaces.

Each animation takes parameters =enabled=, =duration=, and =curve=. ~windows~ and ~workspace~ additionally take a =style= parameter, which can be =slide= or =popin= for ~window~ and =slide=, =slidevert=, and =fadein= for ~workspace~. See more information at the [[https://github.com/vaxerski/Hyprland/wiki/Advanced-config#animations][documentation]].

#+begin_src conf
bezier = overshot,0.1,0.7,0.1,1.1
bezier = easein,0.1,0,1,1
bezier = easeout,0,1,0.5,1

animations {
    animation = windows,1,7,overshot,slide
    animation = fade,1,7,default
    animation = border,1,10,default
    animation = workspaces,1,5,easeout,slidevert
}
#+end_src
* Input
Settings related to input. Input contains the subcategory =touchpad= for, well, touchpad-related settings.

+ kb_layout, kb_variant :: Appropriate ~xkb~ keyboard settings, used to set keyboard variant to Colemak-DH.
+ ~follow_mouse~ :: Focus follows the mouse cursor, and the mouse cursor follows focus.
+ ~force_no_accel~ :: Mouse acceleration (usually) sucks.
+ touchpad:naturaL_scroll :: Not sure what makes this "natural", but it's natural for me, so I guess it makes sense.

Per-device configurations are also possible, documented in detail here. They take the format ~device:name~. I use one to set the keyboard layout of my OnlyKey to QWERTY so it types out passwords correctly; QWERTY's =kb_variant= is simply an empty string.

#+begin_src conf
input {
    kb_layout      = us
    kb_variant     = colemak_dh

    follow_mouse   = 1

    force_no_accel = true

    touchpad {
        natural_scroll = true
    }
}
device:CRYPTOTRUST ONLYKEY {
    kb_variant =
}
#+end_src
* Miscellaneous
Wake up the monitors on mouse move (the lock keybind triggers DPMS).

#+begin_src conf
misc {
     mouse_move_enables_dpms = true
}
#+end_src
* Keybindings
Define a keybinding with the ~bind~ keyword. It takes a modifier, key, dispatcher, and then arguments for the dispatcher (if it has any). For a general list of dispatchers, see [[https://github.com/vaxerski/Hyprland/wiki/Advanced-config#general-dispatcher-list][here]]. Modifiers key are just the key names in all caps smashed together, e.g. =SUPER= or =SUPERSHIFT=. Omitting a modifier is fine as well. Use ~wev~ to get key names if unsure. Single keys are generally uppercase, otherwise all lowercase. I use the =Colemak-DH= keyboard layout; I documented the binds with their QWERTY position, and then transposed them to their appropriate Colemak-DH location.

** Hyprland
+ s-S-q :: Quit =Hyprland=.
+ s-S-r :: Reload =Hyprland=. =Hyprland= automatically reloads the configuration file whenever it's edited, but it doesn't work when the file is a symlink and its target location changes, which is what happens during a NixOS rebuild with ~home-manager~. A keybinding is nice to have to quickly force a reload after a rebuild without having to open a terminal.
#+begin_src conf
bind = SUPERSHIFT,Q,exit
bind = SUPERSHIFT,P,exec,hyprctl reload
#+end_src
** Window Management
+ s-{h/j/k/l} :: Switch focus, Vi-like.
+ s-S-{h/j/k/l} :: Swap windows.
#+begin_src conf
bind = SUPER,M,movefocus,l
bind = SUPER,N,movefocus,d
bind = SUPER,E,movefocus,u
bind = SUPER,I,movefocus,r
bind = SUPERSHIFT,M,movewindow,l
bind = SUPERSHIFT,N,movewindow,d
bind = SUPERSHIFT,E,movewindow,u
bind = SUPERSHIFT,I,movewindow,r
#+end_src

+ s-c :: Close/kill window.
#+begin_src conf
bind = SUPER,D,killactive
#+end_src

Switch & move windows between monitors.
+ s-{s/d} :: Switch focus to the leftward/rightward monitor.
+ s-S-{s/d} :: Move the focused window to the leftward/rightward monitor.
#+begin_src conf
bind = SUPER,R,focusmonitor,l
bind = SUPER,S,focusmonitor,r
bind = SUPERSHIFT,R,movewindow,mon:l
bind = SUPERSHIFT,S,movewindow,mon:r
#+end_src

+ s-f :: Toggle fullscreen for the focused window. The argument decides whether or not to truly fullscreen or simply "maximize" the window and leave gaps + bars; I choose to fully fullscreen.
+ s-S-f :: Toggle floating for the focused window.
+ s-t :: Toggle pseudo-tiled for the focused window. A pseudo-tiled window automatically shrinks with the layout, but will not grow larger than its floating size (useful for e.g. dialog boxes, TOR browser).
#+begin_src conf
# Toggle floating/fullscreen
bind = SUPER,T,fullscreen,0
bind = SUPERSHIFT,T,togglefloating
bind = SUPER,B,pseudo
#+end_src

Resizing windows uses a sub-map activated with =s-r= and exited using =ESC=. This sub-map allows me to resize windows as desired before exiting using =ESC=, like a Hydra in Emacs. To create a sub-map, use the ~submap~ dispatcher and give it a sub-map name. Start defining a sub-map with the ~submap~ keyword and a name, and use =reset= to end the sub-map. Additionally, bind has the =e= flag given, which makes it automatically repeat, convenient for this map. *Don't forget to add a keybinding to exit the sub-map!* See the full documentation [[https://github.com/hyprwm/Hyprland/wiki/Advanced-config/#submaps][here]].
+ s-r :: Enter the ~resize~ sub-map.
+ {h,j,k,l} :: While in the ~resize~ sub-map, resize windows with Vi-like keybindings, respectively.
+ ESC :: Exit the ~resize~ sub-map.
#+begin_src conf
bind   = SUPER,P,submap,resize

submap = resize

binde  = ,M,resizeactive,-100 0
binde  = ,N,resizeactive,0 100
binde  = ,E,resizeactive,0 -100
binde  = ,I,resizeactive,100 0
binde  = SHIFT,M,resizeactive,-20 0
binde  = SHIFT,N,resizeactive,0 20
binde  = SHIFT,E,resizeactive,0 -20
binde  = SHIFT,I,resizeactive,20 0

bind   = ,escape,submap,reset

submap = reset
#+end_src

Groups are collections of windows/nodes that only take up one window's worth of space, like tabs in a browser. A keybinding switches between windows within a group. Opening new windows onto the group nodes adds them to the group.
+ s-g :: Make the current node and all its siblings a group.
+ s-{m/n} :: Switch between the windows in the focused group.
#+begin_src conf
bind = SUPER,G,togglegroup
bind = SUPER,H,changegroupactive,f
bind = SUPER,K,changegroupactive,b
#+end_src
** Workspaces
+ s-{0-9} :: Switch between workspaces.
+ s-S-{0-9} :: Move the focused window to workspace. I prefer to not switch focus when doing this, so I use ~movetoworkspacesilent~.
+ s-{comma,period} :: Switch to the leftward/rightward workspace.
+ s-S-{comma,period} :: Move the focused window to the leftward/rightward workspace.
  ~mÂ±1~ specifies the workspace ID one down/up on the current monitor.
#+begin_src conf
bind = SUPER,1,workspace,1
bind = SUPER,2,workspace,2
bind = SUPER,3,workspace,3
bind = SUPER,4,workspace,4
bind = SUPER,5,workspace,5
bind = SUPER,6,workspace,6
bind = SUPER,7,workspace,7
bind = SUPER,8,workspace,8
bind = SUPER,9,workspace,9
bind = SUPER,0,workspace,10
bind = SUPERSHIFT,1,movetoworkspacesilent,1
bind = SUPERSHIFT,2,movetoworkspacesilent,2
bind = SUPERSHIFT,3,movetoworkspacesilent,3
bind = SUPERSHIFT,4,movetoworkspacesilent,4
bind = SUPERSHIFT,5,movetoworkspacesilent,5
bind = SUPERSHIFT,6,movetoworkspacesilent,6
bind = SUPERSHIFT,7,movetoworkspacesilent,7
bind = SUPERSHIFT,8,movetoworkspacesilent,8
bind = SUPERSHIFT,9,movetoworkspacesilent,9
bind = SUPERSHIFT,0,movetoworkspacesilent,10
bind = SUPER,comma,workspace,m-1
bind = SUPER,period,workspace,m+1
bind = SUPERSHIFT,comma,movetoworkspacesilent,m-1
bind = SUPERSHIFT,period,movetoworkspacesilent,m+1
#+end_src

The special workspace can toggle above any other workspace like a "scratchpad" workspace in other window managers. I'm using the slash key for related keybindings.
+ s-/ :: Toggle special workspace.
+ s-S-/ :: Move a window to the special workspace.
#+begin_src conf
bind = SUPER,slash,togglespecialworkspace
bind = SUPERSHIFT,slash,movetoworkspace,special
#+end_src
** Misc
Screen-locking commands using ~swaylock~. OnlyKey sends the command for Mac as well as Windows, I already use =s-l= but =C-s-q= is free to capture. A non-suspend lock also turns off monitors by calling the DPMS dispatcher through ~hyprctl~ (stacking bindings doesn't work).
+ s-`, C-s-q :: Lock the current session and disable DPMS (turn off monitors).
+ s-~ :: Lock and suspend the current session.
#+begin_src conf
bind = SUPER,grave,exec,swaylock -fF && hyprctl dispatch dpms off
bind = SUPERCTRL,Q,exec,swaylock -fF && hyprctl dispatch dpms off
bind = SUPERSHIFT,grave,exec,swaylock -fF && systemctl suspend
#+end_src

Take a screenshot via ~grim~ and ~slurp~. Currently in a separate script since inlining it doesn't work, but I might try calling Bash sometime. *TODO*
#+begin_src conf
bind = ,print,exec,shootscreen
#+end_src

Music control with the media keys via ~playerctl~.
#+begin_src conf
bind = ,xf86audioplay,exec,playerctl play-pause
bind = ,xf86audioprev,exec,playerctl previous
bind = ,xf86audionext,exec,playerctl next
#+end_src
** Applications
+ s-return :: Wofi
+ s-S-return :: Alacritty
+ s-e :: Emacs client window
+ s-b :: Qutebrowser
+ s-S-b :: Brave
#+begin_src conf
bind = SUPER,return,exec,wofi --show drun
bind = SUPERSHIFT,return,exec,alacritty
bind = SUPER,F,exec,emacsclient -c
bind = SUPER,Z,exec,qutebrowser
bind = SUPERSHIFT,Z,exec,brave
#+end_src
* Layout
=Hyprland= comes with two different layout schemes: =dwindle=, based off =bspwm=, and =master=, based off the master/stack layout popularized by =Xmonad=.

** Dwindle
Settings for the =dwindle= layout. More information in the [[https:github.com/vaxerski/Hyprland/wiki/Dwindle-Layout][documentation]].
+ ~col.group_border~, ~col.group_border_active~ :: Self-explanatory.
+ ~special_scale_factor~ :: Special workspace is 90% of full monitor.
+ ~force_split~ ::  Always split to the right and bottom, regardless of mouse position (default splits to direction of mouse cursor).
+ no_gaps_when_only :: Remove gaps when a window is the only one in the workspace ("smart" gaps).

#+begin_src conf
dwindle {
    col.group_border        = 0xCCB48EAD
    col.group_border_active = 0xFFD08870
    special_scale_factor    = 0.9
    force_split             = 2
    no_gaps_when_only       = true
}
#+end_src
* Window Rules
Window rules define actions that are automatically performed when a window with a matching class is *opened*.

Create a window rule with the ~windowrule~ keyword, which takes a rule to apply and a window class to match against. To find a window class, use the command ~hyprctl activewindow~ or ~hyprctl clients~. For a list of the possible rules, see [[https://github.com/vaxerski/Hyprland/wiki/Advanced-config#rules][here]].

+ Tile the OnlyKey App automatically.
+ Move startup applications to my second monitor.
+ Automatically pseudo-tile Tor Browser (has the class =firefox=, but I don't use actual Firefox so it's fine).
#+begin_src conf
windowrule = tile,OnlyKey

windowrule = monitor 1,discord
windowrule = monitor 1,Signal
windowrule = monitor 1,Sonixd

windowrule = pseudo,firefox
#+end_src
* Startup Applications
Define commands to run on startup with either ~exec~ or ~exec-once~. The former executes on every reload, while the latter only on startup.

*TODO* Fix Electron and remove ~--no-sandbox~

#+begin_src conf
exec-once = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
exec-once = dunst
exec-once = swaybg -i ~/Sync/Wallpapers/0001.png

exec-once = discord --no-sandbox
exec-once = signal-desktop --ozone-platform=wayland
exec-once = sonixd --no-sandbox
#+end_src
* Import Custom Configuration
My Nix module for =Hyprland= exposes an ~extraConfig~ option to apply device-specific configuration; the configuration gets saved to the ~extra.conf~ file, so we source/import it here.

#+begin_src conf
source = ~/.config/hypr/extra.conf
#+end_src
