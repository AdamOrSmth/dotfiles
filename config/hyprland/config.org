#+title: Hyprland Configuration
#+property: header-args :tangle hyprland.conf
#+auto_tangle: t

* Monitors
Configures available monitors, with their appropriate resolutions, refresh rates, relative locations, and workspaces. I prefer only my primary monitor to have workspaces, and for my secondary monitor to remain for reference only, therefore I give it the workspace 10 (bound to 0 in my keybindings). See the [[https://github.com/vaxerski/=Hyprland=/wiki/Advanced-config#monitors][relevant documentation]] for more details.

#+begin_src conf
monitor = DP-2,2560x1440@144,0x0,1
monitor = HDMI-A-1,1920x1080@60,2560x360,1
workspace = DP-2,1
workspace = HDMI-A-1,10
#+end_src
* General
Settings that don't really belong anywhere else (although some of this arguably belongs in the =input= section, but oh well, it's not my code).

+ ~max_fps~ :: Self-explanatory.

+ ~sensitivity~ :: Self-explanatory.
+ ~apply_sens_to_raw~ :: Disable applying mouse sensitivity customization to raw input (e.g. for games).

+ ~main_mod~ :: Super as the default modifier key (Windows key on most keyboards).

+ ~gaps_in~ :: Gap of 3 pixels between windows.
+ ~gaps_out~ :: Gap of 6 pixels between monitor edge and windows.
+ ~border_size~ :: Border width of 3 pixels.

The total distance between windows is equal to ~gaps_in~ + ~border_size~.

+ ~col.active_border~, ~col.inactive_border~ :: Self-explanatory.
+ ~damage_tracking~ :: Only update the screen when something changes. Highly recommended to leave on =full=.

#+begin_src conf
general {
    max_fps = 144

    sensitivity = 1.0
    apply_sens_to_raw = 0

    main_mod = SUPER

    gaps_in = 3
    gaps_out = 6
    border_size = 3
    col.active_border = 0xFF88C0D0
    col.inactive_border = 0xCC3B4252

    damage_tracking = full
}
#+end_src
* Input
Settings related to input.

+ Keyboard settings :: I don't know what any of these do, but =Hyprland= refuses to work without them, so I've kept them present but blank.
+ ~follow_mouse~ :: Focus follows the mouse cursor, and the mouse cursor follows focus.
+ ~force_no_accel~ :: Mouse acceleration (usually) sucks.

#+begin_src conf
input {
    kb_layout =
    kb_variant =
    kb_model =
    kb_options =
    kb_rules =

    follow_mouse = 1

    force_no_accel = 1
}
#+end_src
* Layout
Settings related to the =dwindle= layout of =Hyprland=, based off =bspwm=. More information in the [[https:github.com/vaxerski/Hyprland/wiki/Dwindle-Layout][documentation]].

+ ~col.group_border~, ~col.group_border_active~ :: Self-explanatory.
+ ~special_scale_factor~ :: Special workspace is 90% of full monitor.
+ ~force_split~ ::  Always split to the right and bottom, regardless of mouse position (default splits to direction of mouse cursor).

#+begin_src conf
dwindle {
    col.group_border = 0xCCB48EAD
    col.group_border_active = 0xFFD08870
    special_scale_factor = 0.9
    force_split = 2
}
#+end_src
* Decoration
Appearance-related settings.

+ ~rounding~ :: Round corners of windows by 12 pixels. Lower is practically unnoticeable, higher looks bad on most applications.
+ ~multisample_edges~ :: Make rounding look better.
+ ~blur~ :: Enable background blur of transparent windows.
+ ~blur_size~, ~blur_passes~ :: Blur amount depends on both ~blur_size~ and ~blur_passes~. Increasing ~blur_passes~ increases blur more, but comes at a performance cost, while increasing ~blur_size~ is more performant but begins to produce artifacts at higher values. I've found 3 and 3 work well for me.

#+begin_src conf
decoration {
    rounding = 12
    multisample_edges = 1
    blur = 1
    blur_size = 3
    blur_passes = 3
}
#+end_src
* Animations
Settings related to animations present within =Hyprland=.

I first define some custom bezier curves using the ~bezier~ keyword, which takes a name and then the coordinates for the two points of a cubic bezier. A good place to mess around with curves is [[https://www.cssportal.com/css-cubic-bezier-generator/][here]].
+ =overshot= :: A curve that starts steep and levels out with a bump going slightly over 1. Used with ~windows~.
+ =easein= :: An almost-linear ease-in used with ~fadein~ in conjunction with =overshot= on ~windows~.
+ =easeout= :: A steep, extreme ease-out curve for switching workspaces.

There are four animations in =Hyprland=:
+ ~windows~ :: Animations for the opening, closing, and movement of windows.
+ ~fadein~ :: Animation of windows fading in + out on open + close, respectively.
+ ~borders~ :: Animation of borders fading in + out on focus switch.
+ ~workspaces~ :: Animation of switching workspaces.

Each animation takes parameters =enabled=, =duration=, and =curve=. ~windows~ and ~workspace~ additionally take a =style= parameter, which can be =slide= or =popin= for ~window~ and =slide=, =slidevert=, and =fadein= for ~workspace~. See more information at the [[https://github.com/vaxerski/Hyprland/wiki/Advanced-config#animations][documentation]].

#+begin_src conf
bezier = overshot,0.1,0.7,0.1,1.1
bezier = easein,0.1,0,1,1
bezier = easeout,0,1,0.5,1

animations {
    enabled = 1
    animation = windows,1,7,overshot,slide
    animation = fadein,1,7,default
    animation = borders,1,10,default
    animation = workspaces,1,5,easeout
}
#+end_src
* Keybindings
Define a keybinding with the ~bind~ keyword. It takes a modifier, key, dispatcher, and then arguments for the dispatcher (if it has any). For a general list of dispatchers, see [[https://github.com/vaxerski/Hyprland/wiki/Advanced-config#general-dispatcher-list][here]]. Modifiers key are just the key names in all caps smashed together, e.g. =SUPER= or =SUPERSHIFT=. Omitting a modifier is fine as well. Use ~wev~ to get key names if unsure. Single keys are generally uppercase, otherwise all lowercase.

+ s-return :: Launch Wofi, a native-Wayland application menu.
+ s-S-return :: Launch Alacritty terminal emulator.
#+begin_src conf
bind = SUPER,return,exec,wofi --show drun
bind = SUPERSHIFT,return,exec,alacritty
#+end_src

+ s-S-q :: Quit =Hyprland=.
+ s-S-r :: Reload =Hyprland=. =Hyprland= automatically reloads the configuration file whenever it's edited, but it doesn't work when the file is a symlink and its target location changes, which is what happens during a NixOS rebuild with ~home-manager~. A keybinding is nice to have to quickly force a reload after a rebuild without having to open a terminal.
#+begin_src conf
bind = SUPERSHIFT,Q,exit
bind = SUPERSHIFT,R,exec,hyprctl reload
#+end_src

+ s-f :: Toggle fullscreen for the focused window. The argument decides whether or not to truly fullscreen or simply "maximize" the window and leave gaps + bars; I choose to fully fullscreen.
+ s-S-f :: Toggle floating for the focused window.
+ s-t :: Toggle pseudo-tiled for the focused window. A pseudo-tiled window automatically shrinks with the layout, but will not grow larger than its floating size (useful for e.g. dialog boxes, TOR browser).
#+begin_src conf
# Toggle floating/fullscreen
bind = SUPER,F,fullscreen,0
bind = SUPERSHIFT,F,togglefloating
bind = SUPER,T,pseudo
#+end_src

Open applications:
+ s-e :: Emacs
+ s-b :: Qutebrowser
+ s-S-b :: Brave
#+begin_src conf
bind = SUPER,E,exec,emacsclient -c
bind = SUPER,B,exec,qutebrowser
bind = SUPERSHIFT,B,exec,brave
#+end_src

Focus + move windows directionally, vi-like.
+ s-{h/j/k/l} :: Switch focus directionally.
+ s-S-{h/j/k/l} :: Swap windows directionally. Swapping windows is also possible with s-M1, and is usually more flexible this way.
#+begin_src conf
bind = SUPER,H,movefocus,l
bind = SUPER,J,movefocus,d
bind = SUPER,K,movefocus,u
bind = SUPER,L,movefocus,r
bind = SUPERSHIFT,H,movewindow,l
bind = SUPERSHIFT,J,movewindow,d
bind = SUPERSHIFT,K,movewindow,u
bind = SUPERSHIFT,L,movewindow,r
#+end_src

Music control with the media keys via ~playerctl~.
#+begin_src conf
bind = ,xf86audioplay,exec,playerctl play-pause
bind = ,xf86audioprev,exec,playerctl previous
bind = ,xf86audionext,exec,playerctl next
#+end_src

+ s-c :: Close/kill window.
#+begin_src conf
bind = SUPER,C,killactive
#+end_src

+ s-{0-9} :: Switch between workspaces.
+ s-S-{0-9} :: Move the focused window to workspace. I prefer to not switch focus when doing this, so I use ~movetoworkspacesilent~. *Remember that =SHIFT= changes the typed character.*
+ s-{comma,period} :: Switch to the leftward/rightward workspace.
+ s-S-{comma,period} :: Move the focused window to the leftward/rightward workspace.
  ~mÂ±1~ specifies the workspace ID one down/up on the current monitor.
#+begin_src conf
bind = SUPER,1,workspace,1
bind = SUPER,2,workspace,2
bind = SUPER,3,workspace,3
bind = SUPER,4,workspace,4
bind = SUPER,5,workspace,5
bind = SUPER,6,workspace,6
bind = SUPER,7,workspace,7
bind = SUPER,8,workspace,8
bind = SUPER,9,workspace,9
bind = SUPER,0,workspace,10
bind = SUPERSHIFT,exclam,movetoworkspacesilent,1
bind = SUPERSHIFT,at,movetoworkspacesilent,2
bind = SUPERSHIFT,numbersign,movetoworkspacesilent,3
bind = SUPERSHIFT,dollar,movetoworkspacesilent,4
bind = SUPERSHIFT,percent,movetoworkspacesilent,5
bind = SUPERSHIFT,asciicircum,movetoworkspacesilent,6
bind = SUPERSHIFT,ampersand,movetoworkspacesilent,7
bind = SUPERSHIFT,asterisk,movetoworkspacesilent,8
bind = SUPERSHIFT,parenleft,movetoworkspacesilent,9
bind = SUPERSHIFT,parenright,movetoworkspacesilent,10
bind = SUPER,comma,workspace,m-1
bind = SUPER,period,workspace,m+1
bind = SUPERSHIFT,comma,movetoworkspacesilent,m-1
bind = SUPERSHIFT,period,movetoworkspacesilent,m+1
#+end_src

The special workspace can toggle above any other workspace like a "scratchpad" workspace in other window managers. I'm using the slash key for related keybindings.
+ s-/ :: Toggle special workspace.
+ s-S-/ :: Move a window to the special workspace.
#+begin_src conf
bind = SUPER,slash,togglespecialworkspace
bind = SUPERSHIFT,question,movetoworkspace,special
#+end_src

Switch & move windows between monitors.
+ s-{s/d} :: Switch focus to the leftward/rightward monitor.
+ s-S-{s/d} :: Move the focused window to the leftward/rightward monitor.
#+begin_src conf
bind = SUPER,S,focusmonitor,l
bind = SUPER,D,focusmonitor,r
bind = SUPERSHIFT,S,movewindow,mon:l
bind = SUPERSHIFT,D,movewindow,mon:r
#+end_src

Groups are collections of windows/nodes that only take up one window's worth of space, like tabs in a browser. A keybinding switches between windows within a group. Opening new windows onto the group nodes adds them to the group.
+ s-g :: Make the current node and all its siblings a group.
+ s-{m/n} :: Switch between the windows in the focused group.
#+begin_src conf
# Groups
bind = SUPER,G,togglegroup
bind = SUPER,M,changegroupactive,f
bind = SUPER,N,changegroupactive,b
#+end_src

Screen-locking commands using ~swaylock~. OnlyKey sends the command for Mac as well as Windows, I already use =s-l= but =C-s-q= is free to capture.
+ s-`, C-s-q :: Lock the current session.
+ s-~ :: Lock and suspend the current session.
#+begin_src conf
# Lock
bind = SUPER,grave,exec,swaylock -F
bind = SUPERCTRL,Q,exec,swaylock -F
bind = SUPERSHIFT,asciitilde,exec,swaylock -fF && systemctl suspend
#+end_src

Take a screenshot via ~grim~ and ~slurp~. Currently in a separate script since inlining it doesn't work, but I might try calling Bash sometime. *TODO*
#+begin_src conf
# Screenshot
bind = ,print,exec,shootscreen
#+end_src
* Window Rules
Window rules define actions that are automatically performed when a window with a matching class is *opened*.

Create a window rule with the ~windowrule~ keyword, which takes a rule to apply and a window class to match against. To find a window class, use the command ~hyprctl activewindow~ or ~hyprctl clients~. For a list of the possible rules, see [[https://github.com/vaxerski/Hyprland/wiki/Advanced-config#rules][here]].

+ Tile the OnlyKey App automatically.
+ Move startup applications to my second monitor.
+ Automatically pseudo-tile Tor Browser (has the class =firefox=, but I don't use actual Firefox so it's fine).
+ Fixes for =Zotero='s dialog boxes (they get zero-sized by default). A second rule matching titles makes sure context menus don't get tiled. I also need a Bash script to un-float the default window (see [[*Startup Applications]]) What a mess, =XWayland= sucks sometimes.
#+begin_src conf
windowrule = tile,OnlyKey

windowrule = monitor 1,discord
windowrule = monitor 1,Signal
windowrule = monitor 1,Sonixd

windowrule = pseudo,firefox

windowrule = tile,Zotero
windowrule = float,title:Zotero
#+end_src
* Startup Applications
Define commands to run on startup with either ~exec~ or ~exec-once~. The former executes on every reload, while the latter only on startup.

*TODO* Fix Electron and remove ~--no-sandbox~

#+begin_src conf
exec-once = dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
exec-once = dunst
exec-once = swaybg -i ~/BigBoiStorage/MEGA/Pictures/Wallpapers/0008.png

exec-once = discord --no-sandbox
exec-once = signal-desktop --ozone-platform=wayland
exec-once = sonixd --no-sandbox

exec-once = hyprland-zotero-fix
#+end_src
