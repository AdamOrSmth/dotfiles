#+title: Doom Emacs Configuration
#+property: header-args :tangle yes
#+auto_tangle: t


* Native Compilation
Enable native compilation of Emacs-Lisp.
#+begin_src elisp
(setq native-comp-deferred-compilation t)
#+end_src
* Variables
+ [[(langtool-fix)]] :: Fix for =LanguageTool= on NixOS (since the JAR isn't available).
+ [[(fine-undo)]] :: Instead of undo-ing an entire insert operation.
+ [[(subword-mode)]] :: Word navigation (with evil) respects CamelCase.

#+begin_src elisp
(setq auto-save-default t
      user-full-name "Ad"
      user-mail-address "me@adamorsomething.xyz"
      langtool-bin "/run/current-system/sw/bin/languagetool-commandline" ; (ref:langtool-fix)
      evil-want-fine-undo t)                                             ; (ref:fine-undo)
(global-subword-mode t)                                                  ; (ref:subword-mode)
#+end_src
* Functions
Given an ~org-mode~ buffer =BUFFER= (default current buffer), return its =TITLE= property.
#+begin_src elisp
(defun ad/get-org-buffer-title (&optional buffer)
  (with-current-buffer (or buffer (current-buffer))
    (nth 1 (car (org-collect-keywords '("TITLE"))))))
#+end_src

Create a custom ~org-agenda~ prefix of =LEN=.
#+begin_src elisp
(defun ad/custom-agenda-prefix (len)
  (if buffer-file-name
      (let ((len (if (string-empty-p time) len (- len (length time) 3)))
            (title (ad/get-org-buffer-title (find-file-noselect buffer-file-name))))
        (concat (if (> (length title) len)
                    (s-truncate len title "‚Ä¶")
                  (s-pad-right len " " title))
                (unless (string-empty-p time) " Ôê≤ ")
                time))
    (concat (make-string (- len (length time)) ? ) time)))
#+end_src
* Appearance
#+begin_src elisp
(setq display-line-numbers-type t
      doom-theme 'doom-one
      doom-font (font-spec :family "Comic Code Ligatures" :size 16)
      doom-variable-pitch-font (font-spec :family "Comic Neue" :size 16)
      doom-big-font-increment 6)
#+end_src

Enable italics for comments and keywords.
#+begin_src elisp
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-keyword-face :slant italic))
#+end_src

Make ~org-mode~ headlines, title, and info variable-pitched, varying size, and custom colors. The ~doom-color~ function gets the color from the current color theme.
#+begin_src elisp
(custom-set-faces!
  `(org-document-info  :inherit variable-pitch :height 1.0  :weight light  :slant italic)
  `(org-document-title :inherit variable-pitch :height 1.80 :weight bold   :slant italic)
  `(org-level-1        :inherit variable-pitch :height 1.70 :weight medium :foreground ,(doom-color 'blue))
  `(org-level-2        :inherit variable-pitch :height 1.60 :weight medium :foreground ,(doom-color 'magenta))
  `(org-level-3        :inherit variable-pitch :height 1.50 :weight medium :foreground ,(doom-color 'cyan))
  `(org-level-4        :inherit variable-pitch :height 1.40 :weight medium :foreground ,(doom-color 'violet))
  `(org-level-5        :inherit variable-pitch :height 1.30 :weight medium :foreground ,(doom-color 'teal))
  `(org-level-6        :inherit variable-pitch :height 1.20 :weight medium :foreground ,(doom-color 'green))
  `(org-level-7        :inherit variable-pitch :height 1.10 :weight medium :foreground ,(doom-color 'yellow))
  `(org-level-8        :inherit variable-pitch :height 1.00 :weight medium :foreground ,(doom-color 'orange)))
#+end_src

Enable =beacon.el= for cursor blinking on move. Perhaps replace this with Doom's =nav-flash= module one day? See [[https://github.com/doomemacs/doomemacs/issues/6169][this issue]].
#+begin_src elisp
(use-package! beacon
  :custom
  (beacon-blink-when-point-moves-vertically 10)
  (beacon-blink-when-point-moves-horizontally 20)
  (beacon-color "#D8DEE9")
  :config
  (beacon-mode t)
  (advice-add 'evil-scroll-up :after (lambda (&rest _) (beacon-blink)))
  (advice-add 'evil-scroll-down :after (lambda (&rest _) (beacon-blink))))
#+end_src
* Advice
Replace =sudo= with =doas=.
#+begin_src elisp
(define-advice doom--sudo-file-path (:around (orig-fun file))
  (s-replace "sudo" "doas" (apply orig-fun file nil)))
#+end_src

Make ~j~ and ~k~ navigate through visual lines instead of logical lines by default.
#+begin_src elisp
(after! evil
  (define-advice evil-line-move (:around (orig-fun count &optional noerror))
    (let ((line-move-visual t))
      (apply orig-fun count noerror))))
#+end_src
* Org-Mode
#+begin_src elisp
(setq org-directory "/home/ad/Sync/APP/")
#+end_src
** Appearance
#+begin_src elisp
(setq org-hide-emphasis-markers t
      org-startup-folded 'content
      org-ellipsis " [‚Ä¶] "
      org-list-demote-modify-bullet '(("+" . "-") ("-" . "+") ("*" . "+"))
      org-reverse-note-order t)
#+end_src
** Keybindings
#+begin_src elisp
(map! (:map org-mode-map
       (:localleader
        :desc "org-edit-src-code" "E" #'org-edit-src-code
        :desc "org-latex-preview" "L" #'org-latex-preview
        :desc "org-babel-demarcate-block" "D" #'org-babel-demarcate-block)
       (:leader
        :prefix "i"
        :desc "org-attach-dir" "a" (cmd! (insert (org-attach-dir-get-create))))))

#+end_src
** Progress Logging
Agenda keywords, inspired by Doom's default keywords, just with logging and some custom ones. See https://orgmode.org/manual/Tracking-TODO-state-changes.html for more details. =DONE= doesn't have logging because otherwise custom time/note logs when moving away don't take effect; away-logging added to each word individually instead.
#+begin_src elisp
(after! org
  (setq org-todo-keywords '((sequence
                             "TODO(t/!)"
                             "PROJ(p/!)"
                             "STRT(s!/!)"
                             "WAIT(w@/@)"
                             "HOLD(h@/@)"
                             "IDEA(i/@)"
                             "READ(r/@)"
                             "|"
                             "DONE(d)"
                             "KILL(k@/@)")
                            (sequence
                             "[ ](T/!)"
                             "[-](S!)"
                             "[?](W@/@)"
                             "|"
                             "[X](D)"))
        org-todo-keyword-faces (append org-todo-keyword-faces
                                       '(("LOOK" . +org-todo-active)))))
#+end_src

Log notes and timestamps into drawers.
      #+begin_src elisp
(setq org-log-into-drawer t
      org-log-done 'time)
#+end_src

Prompt to clock into a task when it's marked as 'STRT'.
#+begin_src elisp
(add-hook! 'org-after-todo-state-change-hook
  (when (and (string-equal org-state "STRT")
             (y-or-n-p "Clock into this task?"))
    (org-clock-in)))
#+end_src
** Capture Templates
These capture templates are for random thoughts and notes I want to remember, and all go into my Inbox file for later. For specific notes, I use ~org-roam~ capture templates instead.

#+begin_src elisp
(setq org-default-notes-file (expand-file-name "inbox.org" org-directory)
      org-capture-templates
      '(("d" "default" entry
         (file "inbox.org")
         "* %?\n"
         :prepend t)
        ("e" "event" entry
         (file "inbox.org")
         "* %?\n<%(org-read-date)>\n"
         :prepend t)
        ("t" "todo")
        ("tt" "default" entry
         (file "inbox.org")
         "* TODO %?\n"
         :prepend t)
        ("ts" "scheduled" entry
         (file "inbox.org")
         "* TODO %?\nSCHEDULED: <%(org-read-date)>\n"
         :prepend t)
        ("td" "with deadline" entry
         (file "inbox.org")
         "* TODO %?\nDEADLINE: <%(org-read-date)>\n"
         :prepend t)
        ("i" "idea" entry
         (file "inbox.org")
         "* IDEA %?\n"
         :prepend t)
        ("r" "read later" entry
         (file "inbox.org")
         "* READ %?\n"
         :prepend t)))
#+end_src
** Org-Roam
General settings.
#+begin_src elisp
(setq org-roam-directory org-directory
      org-roam-dailies-directory (expand-file-name "journal/" org-roam-directory)
      org-roam-db-location (expand-file-name ".org-roam.db" org-roam-directory)
      +org-roam-open-buffer-on-find-file nil)
#+end_src
*** File Types
Each subdirectory in my ~org-directory~ corresponds to a "type" of ~org-roam~ note. These code snippets integrate my file types into ~org-roam~ nicely.

Define an associative list for the names of each subdirectory to their respective icon. You could also simply use the subdirectory name alone, but I like having some pretty icons as well. Given the subdirectory name, fetching the icon is as simple as using the ~assoc~ function. ~nil~ is my Inbox file, which is the only file that resides in the root ~org-roam-directory~.
#+begin_src elisp
(defvar ad/org-roam-icons
  '(("gtd"     . "üóì")
    ("journal" . "üìñ")
    ("log"     . "üóÉ")
    ("ref"     . "üìö")
    ("work"    . "‚úè")
    ("zettel"  . "üóí")
    (nil       . "üì•")))
#+end_src

Defining a custom method is how ~org-roam~ allows you to add custom properties to ~org-roam-node-display-template~, which controls the format of functions like ~org-roam-find-file~. I copied the extra font stuff from Doom's default setting for this variable, since I don't really understand how the font stuff works. This code partially comes from =hlissner='s own private configuration, as well as some of Doom's defaults. See the documentation of ~org-roam-node-display-template~ for more information. This has to run after ~org-roam~ loads, else it errors out from the method definition.
#+begin_src elisp
(after! org-roam
   (cl-defmethod org-roam-node-doom-prefix ((node org-roam-node))
     (cdr (assoc (org-roam-node-doom-type node)
                 ad/org-roam-icons)))
  (setq org-roam-node-display-template #("${doom-prefix} ${doom-hierarchy:*} ${todo:8} ${doom-type:12} ${doom-tags:24}" 20 35
                                         (face font-lock-keyword-face)
                                         36 51
                                         (face org-tag))))
#+end_src

I have my titles in my ~org-roam~ file names, as well as the timestamp of creation (which helps serve as a unique file name). I like to automatically have the file name titles in sync with the ~org-mode~ titles, which the following custom function does. I then add it as a hook to run right after save, since the ~org-roam~ values don't get updated before save. It first ensures that it's a file in a folder with managed file names, and then does some string parsing and whatnot to get a new file name, before running the Doom function to rename the file. I've found the Doom function works the best with Doom Emacs, since it's functionally equivalent to the interactive keybinding to move a file, which is what it should be. Keeps everything running smoothly.
#+begin_src elisp
(defun ad/update-roam-filename ()
  (interactive)
  (when (and (org-roam-file-p)
             (-contains-p '("log" "outline" "ref" "work" "zettel") (f-filename (f-parent buffer-file-name))))
    (let
        ((new-file-location
          (concat
           (file-name-directory buffer-file-name)
           (s-replace-regexp "^\\([0-9]\\{14\\}\\).*" "\\1" (file-name-base buffer-file-name))
           "-"
           (-> (org-roam-node-at-point)
               (org-roam-node-file-title)
               (org-roam-node-from-title-or-alias)
               (org-roam-node-slug))
           ".org")))
      (unless (string-equal buffer-file-name new-file-location)
        (doom/move-this-file new-file-location)))))
(add-hook 'after-save-hook #'ad/update-roam-filename)
#+end_src
*** Capture Templates
In some templates, I fill in the ~org-attach~ directory automatically, useful for things like export paths for =gnuplot= or =graphviz=. However, by default, there's no function that both creates the directory and returns it; ~org-attach-dir-get-create~ doesn't accept an ID parameter, and the ID technically doesn't exist in the capture template, since it doesn't have an associated file until its initial save. No other method accepts an ID parameter /and/ creates the directory, so here's a simple one to fill my need.
#+begin_src elisp
(defun ad/org-attach-dir-get-create (id)
  "Return existing or new directory associated with the given ID"
  (let ((attach-dir (org-attach-dir-from-id id)))
    (unless (file-directory-p attach-dir)
      (make-directory attach-dir t))
    attach-dir))

#+end_src

Just a different capture template for each different "type" of note. I do define a short helper function to avoid having to type out the expression for my templates directory over and over again. Otherwise, nothing too interesting going on. For assorted thoughts and tasks, I use normal ~org-mode~ capture templates into my Inbox instead.
#+begin_src elisp
(let ((template (lambda (template)
                  (expand-file-name (concat template ".org")
                                    (expand-file-name "template/" org-roam-directory)))))
  (setq org-roam-capture-templates
        `(("z" "zettel" plain
           (file ,(apply template '("zettel")))
           :target (file "zettel/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("o" "outline" plain
           (file ,(apply template '("outline")))
           :target (file "outline/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("w" "work")
          ("ww" "default" plain
           (file ,(apply template '("work")))
           :target (file "work/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t)
          ("wl" "lab report" plain
           (file ,(apply template '("lab-report")))
           :target (file "work/%<%Y%m%d%H%M%S>-${slug}.org")
           :unnarrowed t))))
#+end_src
*** Dailies/Journals
My dailies are the same as my journal entries; this just defines a capture template and some default contents for each file.
#+begin_src elisp
(setq org-roam-dailies-capture-templates
      `(("d" "default" entry
         (file "template/journal.org")
         :target (file+head
                  "%<%Y-%m-%d>.org"
                  "#+title: %<%Y-%m-%d %a>\n\n")
         :clock-in
         :clock-resume)))

#+end_src
*** Org-Roam-UI
=Org-Roam-UI= is a really cool visualization of ~org-roam~, that unfortunately doesn't come built-in. I set it up here, toggled with the keybinding =SPC n r u=, in line with the rest of the ~org-roam~ binds.

#+begin_src elisp
(use-package! org-roam-ui
  :after (org-roam)
  :bind (:map doom-leader-notes-map ("r u" . org-roam-ui-mode))
  :init
  (use-package! websocket)
  :custom
  (org-roam-ui-sync-theme t)
  (org-roam-ui-follow t)
  (org-roam-ui-update-on-save t)
  (org-roam-ui-open-on-start nil))
#+end_src
** Org-Agenda
#+begin_src elisp
(setq org-agenda-files `(,(expand-file-name "gtd/" org-directory))
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-todo-ignore-scheduled t
      org-agenda-skip-deadline-prewarning-if-scheduled 'pre-scheduled
      org-agenda-prefix-format '((agenda . " %i %(ad/custom-agenda-prefix 32) Ôê≤ %s%b") (todo . " %i %-32:(ad/custom-agenda-prefix 32) Ôê≤ %b") (tags . " %i %-12:c") (search . " %i %-12:c"))
      org-agenda-time-grid
      '((daily today require-timed)
        (800 1000 1200 1400 1600 1800 2000)
        "" "----------------")
      org-agenda-time-leading-zero t
      org-agenda-current-time-string "‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî now")
#+end_src
** Org-Export
#+begin_src elisp
(setq org-export-with-section-numbers nil
      org-export-with-toc nil
      org-export-with-tags nil)
#+end_src

Default export sub-directory, see https://stackoverflow.com/questions/9559753/emacs-org-mode-export-to-another-directory.
#+begin_src elisp
(define-advice org-export-output-file-name (:around (orig-fun extension &optional subtreep pub-dir))
  (unless pub-dir
    (setq pub-dir (expand-file-name "export/" org-directory))
    (unless (file-directory-p pub-dir)
      (make-directory pub-dir)))
  (apply orig-fun extension subtreep pub-dir nil))
#+end_src
** Org-Auto-Tangle
#+begin_src elisp
(use-package! org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
#+end_src
** LaTeX
#+begin_src elisp
(setq org-latex-compiler "lualatex"
      org-latex-default-class "report")
#+end_src

Automatically turn on ~org-cdlatex-mode~ when opening files. A simple minor mode that makes writing subscripts, superscripts, and math easier. See [[https://orgmode.org/manual/CDLaTeX-mode.html][here]] for more.
#+begin_src elisp
(add-hook 'org-mode-hook #'turn-on-org-cdlatex)
#+end_src

One thing I need from LaTeX is for each top-level header to (generally) start on a new page, but not the part and chapter overkill that "report" comes with by default; this customizes the "report" class to do what I want, while leaving everything else default.
#+begin_src elisp
(setq org-latex-classes '(("article" "\\documentclass[11pt]{article}"
                           ("\\section{%s}"       . "\\section*{%s}")
                           ("\\subsection{%s}"    . "\\subsection*{%s}")
                           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                           ("\\paragraph{%s}"     . "\\paragraph*{%s}")
                           ("\\subparagraph{%s}"  . "\\subparagraph*{%s}"))
                          ("report" "\\documentclass[11pt]{report}"
                           ("\\chapter{%s}"       . "\\chapter*{%s}")
                           ("\\section{%s}"       . "\\section*{%s}")
                           ("\\subsection{%s}"    . "\\subsection*{%s}")
                           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                           ("\\paragraph{%s}"     . "\\paragraph*{%s}"))
                          ("book" "\\documentclass[11pt]{book}"
                           ("\\part{%s}"          . "\\part*{%s}")
                           ("\\chapter{%s}"       . "\\chapter*{%s}")
                           ("\\section{%s}"       . "\\section*{%s}")
                           ("\\subsection{%s}"    . "\\subsection*{%s}")
                           ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+end_src
** Personal Spellcheck Dictionary
#+begin_src elisp
(add-hook 'spell-fu-mode-hook
          (lambda () (spell-fu-dictionary-add
                      (spell-fu-get-personal-dictionary "personal" (expand-file-name ".aspell.pws" org-directory)))))
#+end_src
** Anki-Editor
#+begin_src elisp
(use-package! anki-editor
  :hook (org-mode . anki-editor-mode)
  :config
  (map! (:map org-mode-map
         (:localleader
          (:prefix ("F" . "anki")
           :desc "cloze" :nv "c" #'anki-editor-cloze-dwim
           :desc "push" "p" #'anki-editor-push-notes
           :desc "retry failed" "r" #'anki-editor-retry-failure-notes
           :desc "insert note" "i" #'anki-editor-insert-note)))))
#+end_src
* Partial Window Transparency
It may be useless and impractical, but it's hot. Background-only transparency requires either [[https://github.com/TheVaffel/emacs/blob/master/emacs_background_transparency.patch][this patch]] or Emacs 29+.
#+begin_src elisp
(setq default-frame-alist (append default-frame-alist '((alpha-background . 0.75))))
(map! :leader
      (:prefix "t"
       :desc "Transparency" "t"
       (cmd!
        (set-frame-parameter
         nil 'alpha-background
         (let* ((parameter (frame-parameter nil 'alpha-background))
                (alpha (or (car-safe parameter) parameter)))
           (if (or (= alpha 1.0) (= alpha 100))
               0.75
             1.0))))))
#+end_src
* Colemak-DH
The general consensus in the community is to just get used to the new positions of things, but I can't live without my =hjkl= navigation, and I don't feel like going through the work of making a proper extend layer (yet). So I'm just swapping the QWERTY and Colemak-DH positions, as well as deal with the few cascading changes, keeping things as minimal as possible. Where I have the luxury, I swap some of the positions I've already changed as well. Also there are some random variables to update, very fun. Luckily, the ~evil-collection-translate-key~ function makes it pretty easy to swap out all the keys in the appropriate keymaps. Also Magit doesn't work, I have to manually map; no idea why.

#+begin_src elisp
(after! (evil-org)
  (setq evil-org-movement-bindings '((left  . "m")
                                     (down  . "n")
                                     (up    . "e")
                                     (right . "i"))))
(evil-collection-translate-key nil '(evil-normal-state-map evil-motion-state-map evil-visual-state-map evil-operator-state-map)
  "m" "h"
  "n" "j"
  "e" "k"
  "i" "l"
  "h" "e"
  "j" "m"
  "k" "n"
  "l" "u"
  "u" "i"
  "M" "H"
  "N" "J"
  "E" "K"
  "I" "L"
  "H" "E"
  "J" "M"
  "K" "N"
  "L" "U"
  "U" "I")
(evil-collection-translate-key nil '(evil-window-map)
  "m" "h"
  "n" "j"
  "e" "k"
  "i" "l"
  "h" "m"
  "k" "n")
(map! :after magit
      :map magit-mode-map
      :nmv "n" #'evil-next-line
      :nv  "j" #'magit-ediff-dwim
      :nmv "e" #'evil-previous-line
      :nmv "k" #'evil-ex-search-next
      :nmv "K" #'evil-ex-search-previous
      :nmv "E" #'+lookup/documentation)
#+end_src
* =Langtool=
#+begin_src elisp
(map! (:leader
       (:prefix ("l" . "langtool")
        :desc "langtool-check" "c" #'langtool-check
        :desc "langtool-correct-buffer" "l" #'langtool-correct-buffer
        :desc "langtool-check-done" "d" #'langtool-check-done)))
#+end_src
* =titlecase.el=
#+begin_src elisp
(use-package! titlecase
  :after evil
  :config
  (map! :nv "g`" (evil-define-operator evil-titlecase (beg end)
                   (interactive "<r>")
                   (save-excursion
                     (set-mark beg)
                     (goto-char end)
                     (titlecase-dwim)))))
#+end_src
